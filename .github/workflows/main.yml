name: Continuous integration pipeline
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release (y/n)?'
        required: true
        default: 'y'

jobs:
  build-application:
    name: Build the application binary
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.1.0
      - name: Determine short GIT hash
        id: short-sha
        run: |
          echo "sha=$(echo ${{github.sha}} | sed 's/^\(.\{10\}\).*$/\1/')" >> $GITHUB_OUTPUT
      - name: Bump version
        if: github.ref == 'refs/heads/master'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
          default_bump: minor
          fetch_all_tags: true
      - name: Version handling
        id: version_handling
        run: |
          # Use the bumped version when on master or otherwise 0.0.0
          if [ -z ${{ steps.tag_version.outputs.new_tag }} ]
          then
            version=0.0.0
            file_postfix=${{ steps.short-sha.outputs.sha }}-dev
          else
            version=${{ steps.tag_version.outputs.new_version }}
            file_postfix=$version
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "file_postfix=$file_postfix" >> $GITHUB_OUTPUT
          echo "major=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1/')" >> $GITHUB_OUTPUT
          echo "minor=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\2/')" >> $GITHUB_OUTPUT
          echo "bugfix=$(echo $version | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\3/')" >> $GITHUB_OUTPUT
      - name: Build the sample_application binary
        uses: xanderhendriks/action-build-stm32cubeide@v11.0
        with:
          project-path: '.'
          project-target: 'stm32g4'
        env:
          ENV_VERSION_MAJOR: ${{ steps.version_handling.outputs.major }}
          ENV_VERSION_MINOR: ${{ steps.version_handling.outputs.minor }}
          ENV_VERSION_BUGFIX: ${{ steps.version_handling.outputs.bugfix }}
          ENV_SHORT_GIT_HASH: ${{ steps.short-sha.outputs.sha }}
      - name: Rename and copy files
        run: |
          mkdir stm32-firmware
          cp Release/stm32g4.bin stm32-firmware/sample_application-${{ steps.version_handling.outputs.file_postfix }}.bin
          cp Release/stm32g4.elf stm32-firmware/sample_application-${{ steps.version_handling.outputs.file_postfix }}.elf
          cp Release/stm32g4.list stm32-firmware/sample_application-${{ steps.version_handling.outputs.file_postfix }}.list
          cp Release/stm32g4.map stm32-firmware/sample_application-${{ steps.version_handling.outputs.file_postfix }}.map
      - name: Upload sample_application artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: stm32-firmware-sample_application-${{ steps.version_handling.outputs.file_postfix }}
          path: stm32-firmware
  release:
    needs: [build-application]
    if: github.event.inputs.release == 'y'
    name: Release to Github
    runs-on: ubuntu-20.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3.0.1
        with:
          path: stm32-firmware
      - name: Determine version
        id: determine_version
        run: |
          if [ -n "$(find stm32-firmware -name 'stm32-firmware-sample_application-*-dev')" ]
          then
              version=0.0.0
              file_postfix=$(find stm32-firmware -name "stm32-firmware-sample_application-*" | sed 's/stm32-firmware\/stm32-firmware-sample_application-\(.*\)/\1/')
          else
              version=$(find stm32-firmware -name "stm32-firmware-sample_application-*" | sed 's/stm32-firmware\/stm32-firmware-sample_application-\([0-9\.]*\)/\1/')
              file_postfix=$version
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "file_postfix=$file_postfix" >> $GITHUB_OUTPUT
      - name: Release to Github
        id: create_release
        uses: ncipollo/release-action@v1.11.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.determine_version.outputs.file_postfix }}
          name: v${{ steps.determine_version.outputs.file_postfix }}
          commit: ${{ github.sha }}
          draft: false
          prerelease: false
          artifacts: "stm32-firmware/stm32-firmware-*/*"
